#pragma once

#include "Commons.h"
namespace Machi {
	namespace NativeGraphics {
		using namespace Machi::Graphics;
		inline D3D12_FENCE_FLAGS fence_flag_convert(FenceFlags t) {
			switch (t)
			{
			case Machi::Graphics::FenceFlags::MACHI_FENCE_FLAG_NONE:
				return D3D12_FENCE_FLAG_NONE;
			case Machi::Graphics::FenceFlags::MACHI_FENCE_FLAG_SHARED:
				return D3D12_FENCE_FLAG_SHARED;
			case Machi::Graphics::FenceFlags::MACHI_FENCE_FLAG_SHARED_CROSS_ADAPTER:
				return D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER;
			case Machi::Graphics::FenceFlags::MACHI_FENCE_FLAG_NON_MONITORED:
				return D3D12_FENCE_FLAG_NON_MONITORED;
			}

		}
		inline DXGI_FORMAT resource_format_convert(ResourceFormat t) {
			switch (t) {
			case MACHI_FORMAT_UNKNOWN:
				return DXGI_FORMAT_UNKNOWN;
			case MACHI_FORMAT_R32G32B32A32_TYPELESS:
				return DXGI_FORMAT_R32G32B32A32_TYPELESS;
			case MACHI_FORMAT_R32G32B32A32_FLOAT:
				return DXGI_FORMAT_R32G32B32A32_FLOAT;
			case MACHI_FORMAT_R32G32B32A32_UINT:
				return DXGI_FORMAT_R32G32B32A32_UINT;
			case MACHI_FORMAT_R32G32B32A32_SINT:
				return DXGI_FORMAT_R32G32B32A32_SINT;
			case MACHI_FORMAT_R32G32B32_TYPELESS:
				return DXGI_FORMAT_R32G32B32_TYPELESS;
			case MACHI_FORMAT_R32G32B32_FLOAT:
				return DXGI_FORMAT_R32G32B32_FLOAT;
			case MACHI_FORMAT_R32G32B32_UINT:
				return DXGI_FORMAT_R32G32B32_UINT;
			case MACHI_FORMAT_R32G32B32_SINT:
				return DXGI_FORMAT_R32G32B32_SINT;
			case MACHI_FORMAT_R16G16B16A16_TYPELESS:
				return DXGI_FORMAT_R16G16B16A16_TYPELESS;
			case MACHI_FORMAT_R16G16B16A16_FLOAT:
				return DXGI_FORMAT_R16G16B16A16_FLOAT;
			case MACHI_FORMAT_R16G16B16A16_UNORM:
				return DXGI_FORMAT_R16G16B16A16_UNORM;
			case MACHI_FORMAT_R16G16B16A16_UINT:
				return DXGI_FORMAT_R16G16B16A16_UINT;
			case MACHI_FORMAT_R16G16B16A16_SNORM:
				return DXGI_FORMAT_R16G16B16A16_SNORM;
			case MACHI_FORMAT_R16G16B16A16_SINT:
				return DXGI_FORMAT_R16G16B16A16_SINT;
			case MACHI_FORMAT_R32G32_TYPELESS:
				return DXGI_FORMAT_R32G32_TYPELESS;
			case MACHI_FORMAT_R32G32_FLOAT:
				return DXGI_FORMAT_R32G32_FLOAT;
			case MACHI_FORMAT_R32G32_UINT:
				return DXGI_FORMAT_R32G32_UINT;
			case MACHI_FORMAT_R32G32_SINT:
				return DXGI_FORMAT_R32G32_SINT;
			case MACHI_FORMAT_R32G8X24_TYPELESS:
				return DXGI_FORMAT_R32G8X24_TYPELESS;
			case MACHI_FORMAT_D32_FLOAT_S8X24_UINT:
				return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
			case MACHI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
				return DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
			case MACHI_FORMAT_X32_TYPELESS_G8X24_UINT:
				return DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
			case MACHI_FORMAT_R10G10B10A2_TYPELESS:
				return DXGI_FORMAT_R10G10B10A2_TYPELESS;
			case MACHI_FORMAT_R10G10B10A2_UNORM:
				return DXGI_FORMAT_R10G10B10A2_UNORM;
			case MACHI_FORMAT_R10G10B10A2_UINT:
				return DXGI_FORMAT_R10G10B10A2_UINT;
			case MACHI_FORMAT_R11G11B10_FLOAT:
				return DXGI_FORMAT_R11G11B10_FLOAT;
			case MACHI_FORMAT_R8G8B8A8_TYPELESS:
				return DXGI_FORMAT_R8G8B8A8_TYPELESS;
			case MACHI_FORMAT_R8G8B8A8_UNORM:
				return DXGI_FORMAT_R8G8B8A8_UNORM;
			case MACHI_FORMAT_R8G8B8A8_UNORM_SRGB:
				return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
			case MACHI_FORMAT_R8G8B8A8_UINT:
				return DXGI_FORMAT_R8G8B8A8_UINT;
			case MACHI_FORMAT_R8G8B8A8_SNORM:
				return DXGI_FORMAT_R8G8B8A8_SNORM;
			case MACHI_FORMAT_R8G8B8A8_SINT:
				return DXGI_FORMAT_R8G8B8A8_SINT;
			case MACHI_FORMAT_R16G16_TYPELESS:
				return DXGI_FORMAT_R16G16_TYPELESS;
			case MACHI_FORMAT_R16G16_FLOAT:
				return DXGI_FORMAT_R16G16_FLOAT;
			case MACHI_FORMAT_R16G16_UNORM:
				return DXGI_FORMAT_R16G16_UNORM;
			case MACHI_FORMAT_R16G16_UINT:
				return DXGI_FORMAT_R16G16_UINT;
			case MACHI_FORMAT_R16G16_SNORM:
				return DXGI_FORMAT_R16G16_SNORM;
			case MACHI_FORMAT_R16G16_SINT:
				return DXGI_FORMAT_R16G16_SINT;
			case MACHI_FORMAT_R32_TYPELESS:
				return DXGI_FORMAT_R32_TYPELESS;
			case MACHI_FORMAT_D32_FLOAT:
				return DXGI_FORMAT_D32_FLOAT;
			case MACHI_FORMAT_R32_FLOAT:
				return DXGI_FORMAT_R32_FLOAT;
			case MACHI_FORMAT_R32_UINT:
				return DXGI_FORMAT_R32_UINT;
			case MACHI_FORMAT_R32_SINT:
				return DXGI_FORMAT_R32_SINT;
			case MACHI_FORMAT_R24G8_TYPELESS:
				return DXGI_FORMAT_R24G8_TYPELESS;
			case MACHI_FORMAT_D24_UNORM_S8_UINT:
				return DXGI_FORMAT_D24_UNORM_S8_UINT;
			case MACHI_FORMAT_R24_UNORM_X8_TYPELESS:
				return DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
			case MACHI_FORMAT_X24_TYPELESS_G8_UINT:
				return DXGI_FORMAT_X24_TYPELESS_G8_UINT;
			case MACHI_FORMAT_R8G8_TYPELESS:
				return DXGI_FORMAT_R8G8_TYPELESS;
			case MACHI_FORMAT_R8G8_UNORM:
				return DXGI_FORMAT_R8G8_UNORM;
			case MACHI_FORMAT_R8G8_UINT:
				return DXGI_FORMAT_R8G8_UINT;
			case MACHI_FORMAT_R8G8_SNORM:
				return DXGI_FORMAT_R8G8_SNORM;
			case MACHI_FORMAT_R8G8_SINT:
				return DXGI_FORMAT_R8G8_SINT;
			case MACHI_FORMAT_R16_TYPELESS:
				return DXGI_FORMAT_R16_TYPELESS;
			case MACHI_FORMAT_R16_FLOAT:
				return DXGI_FORMAT_R16_FLOAT;
			case MACHI_FORMAT_D16_UNORM:
				return DXGI_FORMAT_D16_UNORM;
			case MACHI_FORMAT_R16_UNORM:
				return DXGI_FORMAT_R16_UNORM;
			case MACHI_FORMAT_R16_UINT:
				return DXGI_FORMAT_R16_UINT;
			case MACHI_FORMAT_R16_SNORM:
				return DXGI_FORMAT_R16_SNORM;
			case MACHI_FORMAT_R16_SINT:
				return DXGI_FORMAT_R16_SINT;
			case MACHI_FORMAT_R8_TYPELESS:
				return DXGI_FORMAT_R8_TYPELESS;
			case MACHI_FORMAT_R8_UNORM:
				return DXGI_FORMAT_R8_UNORM;
			case MACHI_FORMAT_R8_UINT:
				return DXGI_FORMAT_R8_UINT;
			case MACHI_FORMAT_R8_SNORM:
				return DXGI_FORMAT_R8_SNORM;
			case MACHI_FORMAT_R8_SINT:
				return DXGI_FORMAT_R8_SINT;
			case MACHI_FORMAT_A8_UNORM:
				return DXGI_FORMAT_A8_UNORM;
			case MACHI_FORMAT_R1_UNORM:
				return DXGI_FORMAT_R1_UNORM;
			case MACHI_FORMAT_R9G9B9E5_SHAREDEXP:
				return DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
			case MACHI_FORMAT_R8G8_B8G8_UNORM:
				return DXGI_FORMAT_R8G8_B8G8_UNORM;
			case MACHI_FORMAT_G8R8_G8B8_UNORM:
				return DXGI_FORMAT_G8R8_G8B8_UNORM;
			case MACHI_FORMAT_BC1_TYPELESS:
				return DXGI_FORMAT_BC1_TYPELESS;
			case MACHI_FORMAT_BC1_UNORM:
				return DXGI_FORMAT_BC1_UNORM;
			case MACHI_FORMAT_BC1_UNORM_SRGB:
				return DXGI_FORMAT_BC1_UNORM_SRGB;
			case MACHI_FORMAT_BC2_TYPELESS:
				return DXGI_FORMAT_BC2_TYPELESS;
			case MACHI_FORMAT_BC2_UNORM:
				return DXGI_FORMAT_BC2_UNORM;
			case MACHI_FORMAT_BC2_UNORM_SRGB:
				return DXGI_FORMAT_BC2_UNORM_SRGB;
			case MACHI_FORMAT_BC3_TYPELESS:
				return DXGI_FORMAT_BC3_TYPELESS;
			case MACHI_FORMAT_BC3_UNORM:
				return DXGI_FORMAT_BC3_UNORM;
			case MACHI_FORMAT_BC3_UNORM_SRGB:
				return DXGI_FORMAT_BC3_UNORM_SRGB;
			case MACHI_FORMAT_BC4_TYPELESS:
				return DXGI_FORMAT_BC4_TYPELESS;
			case MACHI_FORMAT_BC4_UNORM:
				return DXGI_FORMAT_BC4_UNORM;
			case MACHI_FORMAT_BC4_SNORM:
				return DXGI_FORMAT_BC4_SNORM;
			case MACHI_FORMAT_BC5_TYPELESS:
				return DXGI_FORMAT_BC5_TYPELESS;
			case MACHI_FORMAT_BC5_UNORM:
				return DXGI_FORMAT_BC5_UNORM;
			case MACHI_FORMAT_BC5_SNORM:
				return DXGI_FORMAT_BC5_SNORM;
			case MACHI_FORMAT_B5G6R5_UNORM:
				return DXGI_FORMAT_B5G6R5_UNORM;
			case MACHI_FORMAT_B5G5R5A1_UNORM:
				return DXGI_FORMAT_B5G5R5A1_UNORM;
			case MACHI_FORMAT_B8G8R8A8_UNORM:
				return DXGI_FORMAT_B8G8R8A8_UNORM;
			case MACHI_FORMAT_B8G8R8X8_UNORM:
				return DXGI_FORMAT_B8G8R8X8_UNORM;
			case MACHI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
				return DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
			case MACHI_FORMAT_B8G8R8A8_TYPELESS:
				return DXGI_FORMAT_B8G8R8A8_TYPELESS;
			case MACHI_FORMAT_B8G8R8A8_UNORM_SRGB:
				return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
			case MACHI_FORMAT_B8G8R8X8_TYPELESS:
				return DXGI_FORMAT_B8G8R8X8_TYPELESS;
			case MACHI_FORMAT_B8G8R8X8_UNORM_SRGB:
				return DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;
			case MACHI_FORMAT_BC6H_TYPELESS:
				return DXGI_FORMAT_BC6H_TYPELESS;
			case MACHI_FORMAT_BC6H_UF16:
				return DXGI_FORMAT_BC6H_UF16;
			case MACHI_FORMAT_BC6H_SF16:
				return DXGI_FORMAT_BC6H_SF16;
			case MACHI_FORMAT_BC7_TYPELESS:
				return DXGI_FORMAT_BC7_TYPELESS;
			case MACHI_FORMAT_BC7_UNORM:
				return DXGI_FORMAT_BC7_UNORM;
			case MACHI_FORMAT_BC7_UNORM_SRGB:
				return DXGI_FORMAT_BC7_UNORM_SRGB;
			case MACHI_FORMAT_AYUV:
				return DXGI_FORMAT_AYUV;
			case MACHI_FORMAT_Y410:
				return DXGI_FORMAT_Y410;
			case MACHI_FORMAT_Y416:
				return DXGI_FORMAT_Y416;
			case MACHI_FORMAT_NV12:
				return DXGI_FORMAT_NV12;
			case MACHI_FORMAT_P010:
				return DXGI_FORMAT_P010;
			case MACHI_FORMAT_P016:
				return DXGI_FORMAT_P016;
			case MACHI_FORMAT_420_OPAQUE:
				return DXGI_FORMAT_420_OPAQUE;
			case MACHI_FORMAT_YUY2:
				return DXGI_FORMAT_YUY2;
			case MACHI_FORMAT_Y210:
				return DXGI_FORMAT_Y210;
			case MACHI_FORMAT_Y216:
				return DXGI_FORMAT_Y216;
			case MACHI_FORMAT_NV11:
				return DXGI_FORMAT_NV11;
			case MACHI_FORMAT_AI44:
				return DXGI_FORMAT_AI44;
			case MACHI_FORMAT_IA44:
				return DXGI_FORMAT_IA44;
			case MACHI_FORMAT_P8:
				return DXGI_FORMAT_P8;
			case MACHI_FORMAT_A8P8:
				return DXGI_FORMAT_A8P8;
			case MACHI_FORMAT_B4G4R4A4_UNORM:
				return DXGI_FORMAT_B4G4R4A4_UNORM;
			case MACHI_FORMAT_P208:
				return DXGI_FORMAT_P208;
			case MACHI_FORMAT_V208:
				return DXGI_FORMAT_V208;
			case MACHI_FORMAT_V408:
				return DXGI_FORMAT_V408;
			case MACHI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE:
				return DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE;
			case MACHI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE:
				return DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE;
			case MACHI_FORMAT_FORCE_UINT:
				return DXGI_FORMAT_FORCE_UINT;
			}
		}


		inline D3D12_SHADER_VISIBILITY shader_visibility_convert(ShaderVisibility t) {

			switch (t)
			{
			case MACHI_SHADER_VISIBILITY_ALL:
				return D3D12_SHADER_VISIBILITY_ALL;
			case MACHI_SHADER_VISIBILITY_VERTEX:
				return D3D12_SHADER_VISIBILITY_VERTEX;
			case MACHI_SHADER_VISIBILITY_HULL:
				return D3D12_SHADER_VISIBILITY_HULL;
			case MACHI_SHADER_VISIBILITY_DOMAIN:
				return D3D12_SHADER_VISIBILITY_DOMAIN;
			case MACHI_SHADER_VISIBILITY_GEOMETRY:
				return D3D12_SHADER_VISIBILITY_GEOMETRY;
			case MACHI_SHADER_VISIBILITY_PIXEL:
				return D3D12_SHADER_VISIBILITY_PIXEL;
			case MACHI_SHADER_VISIBILITY_AMPLIFICATION:
				return D3D12_SHADER_VISIBILITY_AMPLIFICATION;
			case MACHI_SHADER_VISIBILITY_MESH:
				return D3D12_SHADER_VISIBILITY_MESH;
			default:
				break;
			}
		}

		inline D3D12_INPUT_CLASSIFICATION shader_input_type_convert(ShaderInputType t) {

			switch (t) {
			case MACHI_PER_VERTEX:
				return D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA;
			case MACHI_PER_INSTANCE:
				return D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA;
			}

		}


		inline D3D12_DESCRIPTOR_HEAP_TYPE descriptor_heap_type_convert(DescriptorHeapType t) {

			switch (t)
			{
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV:
				return D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_TYPE_SAMPLER:
				return D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER;
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_TYPE_RTV:
				return D3D12_DESCRIPTOR_HEAP_TYPE_RTV;
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_TYPE_DSV:
				return D3D12_DESCRIPTOR_HEAP_TYPE_DSV;
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_TYPE_NUM_TYPES:
				return D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES;
			}


		}

		inline D3D12_DESCRIPTOR_HEAP_FLAGS descriptor_heap_flag_convert(DescriptorHeapFlags t) {
			switch (t)
			{
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_FLAG_NONE:
				return D3D12_DESCRIPTOR_HEAP_FLAG_NONE;
			case Machi::Graphics::MACHI_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE:
				return D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;
			}
		}

		inline D3D12_HEAP_TYPE heap_type_convert(HeapType t) {

			switch (t)
			{
			case Machi::Graphics::MACHI_HEAP_TYPE_DEFAULT:
				return D3D12_HEAP_TYPE_DEFAULT;
			case Machi::Graphics::MACHI_HEAP_TYPE_UPLOAD:
				return D3D12_HEAP_TYPE_UPLOAD;
			case Machi::Graphics::MACHI_HEAP_TYPE_READBACK:
				return D3D12_HEAP_TYPE_READBACK;
			case Machi::Graphics::MACHI_HEAP_TYPE_CUSTOM:
				return D3D12_HEAP_TYPE_CUSTOM;
			}
		}

	}
}